(module "readline"
  (export
    (list "readline" readline)
    (list "add-history" add-history))

  (history [])

  (go-back (lambda (n)
      (++ (string (integer->char 27)) "[" (number->string n) "D")))

  (remove-from-input (lambda (count)
    (let ((b (string:replicate count #\backspace)))
      (display (++ b (string:replicate count #\space) b) :flush))))

  (replace-input (lambda (old new)
    (begin
      (remove-from-input (length old))
      (display (if (list? new) (list->string new) new) :flush))))

  (cleanup (lambda (c f)
    (lambda (state)
      (begin
        (remove-from-input c)
        (f state)))))

  (move-to-beginning (lambda (state)
    (hash:set state :pos 0)))

  (move-to-end (lambda (state)
    (hash:set state :pos (length (state :acc)))))

  (history-up (lambda (state)
    (if (>= (state :cur) (sub1 (length history)))
      state
      (let* ((update-cur (hash:update state :cur add1))
             (elem (list:ref history (update-cur :cur)))
             (update-pos (hash:set update-cur :pos (length elem))))
        (hash:set update-pos :acc (string->list elem))))))

  (history-down (lambda (state)
    (if (<= (state :cur) 0)
      (new-state (state :prompt))
      (let* ((update-cur (hash:update state :cur sub1))
             (elem (list:ref history (update-cur :cur)))
             (update-pos (hash:set update-cur :pos (length elem))))
        (hash:set update-pos :acc (string->list elem))))))

  (cursor-left (lambda (state)
    (if (> 0 (sub1 (state :pos)))
        state
        (hash:update state
                     :pos
                     sub1))))

  (cursor-right (lambda (state)
    (if (< (length (state :acc)) (add1 (state :pos)))
        state
        (hash:update state 
                     :pos
                     add1))))

  (backspace (lambda (state)
    (if (and (> (length (state :acc)) 0) (> (state :pos) 0))
      (begin
        (remove-from-input 3)
        (hash:update (hash:update state :pos sub1)
                     :acc
                     (lambda (acc) (list:remove-n acc (sub1 (state :pos))))))
      (begin
        (remove-from-input 2)
        state))))

  (_search-backspace (lambda (term)
    (if (> (length term) 0)
      (begin
        (remove-from-input 3)
        (substring term 0 (sub1 (length term))))
      (begin
        (remove-from-input 2)
        term))))

  (_search (lambda (state term)
    (begin
      (remove-from-input (+ (length (state :acc)) (length (state :prompt)) 100))
      (display (++ "(reverse-i-search)`" term "': ") :flush)
      (let* ((matches (filter (lambda (item) (in? item term)) history))
             (best (get-from matches 0 ""))
             (state (hash:set state :acc (if (truthy? best) (string->list best) (string->list term)))))
        (begin
          (display best :flush)
          (case (read-char)
              ((#\newline) (list->string (state :acc)))
              ((#\x1B) (_readline (treat-special state)))
              ((eq? #\x7f char)
                (_search state (_search-backspace term)))
              ((eq? 1 (char->integer char)) (_readline (move-to-beginning state)))
              ((eq? 2 (char->integer char)) (_readline (cursor-left state)))
              ((eq? 5 (char->integer char)) (_readline (move-to-end state)))
              ((eq? 6 (char->integer char)) (_readline (cursor-right state)))
              ((eq? 14 (char->integer char)) (_readline (history-up state)))
              ((eq? 16 (char->integer char)) (_readline (history-down state)))
              ((eq? 18 (char->integer char)) (_readline (reverse-search state)))
              (else => (lambda (char) (_search state (++ term char))))))))))

  (reverse-search (lambda (state)
    (begin
      (let ((found (_search state "")))
        found))))

  (special (make-hash "[A" (cleanup 4 history-up)
                      "[B" (cleanup 4 history-down)
                      "[D" (cleanup 4 cursor-left)
                      "[C" (cleanup 4 cursor-right)))

  (treat-special (lambda (state)
    (let ((thing (string (read-char) (read-char))))
      (if (hash:contains? special thing)
        ((special thing) state)
        (hash:update state
                     :acc
                     (lambda (acc) (list:insert acc (state:pos) (string->list (++ "^[" thing)))))))))

  (clean-prompt (lambda (state)
    (begin
      (remove-from-input (+ (length (state :acc)) (length (state :prompt)) 100))
      (display (state :prompt) :flush)
      (display (list->string (state :acc)) :flush)
      (let ((diff (- (length (state :acc)) (state :pos))))
        (if (> diff 0)
          (display (go-back diff) :flush))))))

  (_readline (lambda (state)
    (begin
      (clean-prompt state)
      (let ((char (read-char)))
        (cond
          ((eq? #\newline char) (list->string (state :acc)))
          ((eq? #\x1B char) (_readline (treat-special state)))
          ((eq? 1 (char->integer char)) (_readline (move-to-beginning state)))
          ((eq? 2 (char->integer char)) (_readline (cursor-left state)))
          ((eq? 5 (char->integer char)) (_readline (move-to-end state)))
          ((eq? 6 (char->integer char)) (_readline (cursor-right state)))
          ((eq? 14 (char->integer char)) (_readline (history-up state)))
          ((eq? 16 (char->integer char)) (_readline (history-down state)))
          ((eq? 18 (char->integer char)) (reverse-search state))
          ((eq? #\x7f char)
            (_readline (backspace state)))
          (else
            (let ((insert-char (hash:update state
                                             :acc
                                             (lambda (acc) (list:insert acc (state :pos) char)))))
              (_readline (hash:update insert-char :pos add1)))))))))

  (add-history (lambda (item)
    (set! history (cons item history))))

  (new-state (lambda (prompt)
    (make-hash :cur -1 :pos 0 :acc [] :prompt prompt)))

  (readline (lambda (prompt)
    (begin
      (_readline (new-state prompt))))))
